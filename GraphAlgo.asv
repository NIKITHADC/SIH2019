% Calculate the maximum flow between all the nodes in a directed graph network %

% Creating a graph with 8 nodes with some weights %
% 1->1, 1->4, 1->8, 2->3 and so on... %
s = [1 1 1 2 2 3 3 4 5 5 6 7];
t = [2 4 8 3 7 4 6 5 6 8 7 8];

% The length of the road edges in index_final format
% Unit metre
lengths = [500 500 600 600 200 200 100 100 150 150 410 410 650 650];

% The width of the road edges in index_final format
% Unit metre
widths = [];

% These weights would be given from the F-CNN%
% Using static pre-defined weights for now %
weights = [1 4 5 3 6 5 4 3 1 3 7 5 4 3];

% Adding labels to Nodes 
names = {'A' 'B' 'C' 'D' 'E' 'F'};

% Mapping the G.Edges index to pre-defined network format
new_map = [2 6 1 4 8 3 10 1 13 7 14 11 5 12]

% Creating digraph 
G = digraph(s,t,weights);

% Calculating adjacency matrix for graph
A = adjacency(G,'weighted');

% Calculating all possible paths from (graphAdjacencyMatrix,startNode, endNode)
% using a defined MATLAB function
startNode = 1;
endNode = 3;
pths = pathbetweennodes(A,startNode,endNode);

% Iterating through all the paths from startNode to endNode
for i = 1:length(pths)
    curr = pths{i};
    curr_length = [];
    curr_width = [];
    
    pth_final = [];
    distance = [];
    
    % Calculating length and width for individual edges
    for j = 1:length(curr) - 1
        % Find index of all edges in curr path to retrieve length and width
        index = findedge(G, curr(1, j), curr(1, j+1));
        index_final = new_map(1,index);
        disp(index_final);
        %idxOut = findedge(G,s,t) returns the numeric edge indices, idxOut, for the edges specified by the source and target node pairs s and t%
        curr_length = [curr_length lengths(index_final)];
        curr_width = [curr_width widths(index_final)];
    end
    
    % Taking out the minimum width and total sum of lengths of edges in all
    % paths
    min_width = min(curr_width, [], 'omitnan');
    sum_distance = sum(curr_length, 'omitnan');
    
    % Setting the threshold for large roads to be > 3 metres
    % Retrieving only those roads which are large
    if min_width > 3
        pth_final = [pth_final curr];
        distance = [distance sum_distance];
    else
        continue;
    end
end

% Iterate through the paths that passed the threshold for width
for i = 1:length(pth_final)
    curr_path = pth_final{i};
    flow = [];
    metric = [];
    
    % For each such chosen path
    for j = 1:length(curr_path)-1
        index = findedge(G, curr_path(1, j), curr_path(1, j+1));
        
        % Calculate the flow for each edge
        flow = [flow (lengths(index)*widths(index))/(widths(index))];
    end
    
    metric = [metric (min(flow, [], 'all'))];
end